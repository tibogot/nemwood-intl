"use server";

import nodemailer from "nodemailer";
import { z } from "zod";
import { redirect } from "next/navigation";

// Form validation schema
const contactSchema = z.object({
  firstName: z.string().min(1, "Le pr√©nom est requis"),
  lastName: z.string().min(1, "Le nom est requis"),
  email: z.string().email("Adresse email invalide"),
  phone: z.string().optional(),
  message: z
    .string()
    .min(10, "Le message doit contenir au moins 10 caract√®res"),
});

export type ContactFormState = {
  success?: boolean;
  error?: string;
  fieldErrors?: {
    firstName?: string[];
    lastName?: string[];
    email?: string[];
    phone?: string[];
    message?: string[];
  };
};

export async function submitContactForm(
  prevState: ContactFormState,
  formData: FormData,
): Promise<ContactFormState> {
  console.log("üöÄ Contact form submission started");
  console.log("üìß Environment variables check:", {
    SMTP_HOST: process.env.SMTP_HOST ? "‚úÖ Set" : "‚ùå Missing",
    SMTP_PORT: process.env.SMTP_PORT ? "‚úÖ Set" : "‚ùå Missing",
    SMTP_USER: process.env.SMTP_USER ? "‚úÖ Set" : "‚ùå Missing",
    SMTP_PASS: process.env.SMTP_PASS ? "‚úÖ Set" : "‚ùå Missing",
    SMTP_FROM: process.env.SMTP_FROM ? "‚úÖ Set" : "‚ùå Missing",
  });

  try {
    // Validate form data
    console.log("üîç Validating form data...");
    const validatedFields = contactSchema.safeParse({
      firstName: formData.get("firstName"),
      lastName: formData.get("lastName"),
      email: formData.get("email"),
      phone: formData.get("phone"),
      message: formData.get("message"),
    });

    // If validation fails, return field errors
    if (!validatedFields.success) {
      console.log(
        "‚ùå Validation failed:",
        validatedFields.error.flatten().fieldErrors,
      );
      return {
        error: "Veuillez corriger les erreurs ci-dessous",
        fieldErrors: validatedFields.error.flatten().fieldErrors,
      };
    }

    console.log("‚úÖ Form validation passed");
    const { firstName, lastName, email, phone, message } = validatedFields.data;

    // Create nodemailer transporter
    console.log("SMTP Config:", {
      host: process.env.SMTP_HOST,
      port: process.env.SMTP_PORT,
      secure: process.env.SMTP_SECURE,
      user: process.env.SMTP_USER,
      passLength: process.env.SMTP_PASS?.length || 0,
    });

    const transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST || "ssl0.ovh.net",
      port: parseInt(process.env.SMTP_PORT || "465"),
      secure: process.env.SMTP_SECURE === "true", // true for 465, false for other ports
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
      // OVH SSL0 specific options
      ignoreTLS: false,
      requireTLS: true,
      debug: true, // Enable debug logs
      connectionTimeout: 60000, // 60 seconds
      greetingTimeout: 30000, // 30 seconds
    });

    // Email content
    const emailContent = `
Nouvelle demande de contact depuis le site Nemwood

Informations du client :
- Nom : ${firstName} ${lastName}
- Email : ${email}
- T√©l√©phone : ${phone || "Non renseign√©"}

Message :
${message}

---
Email envoy√© depuis le formulaire de contact Nemwood
Date : ${new Date().toLocaleString("fr-BE", { timeZone: "Europe/Brussels" })}
    `.trim();

    // Test SMTP connection first
    console.log("Testing SMTP connection...");
    await transporter.verify();
    console.log("SMTP connection verified successfully");

    // Send email to your business email
    console.log("Sending email to:", "contact@nemwood.be");
    await transporter.sendMail({
      from: process.env.SMTP_FROM || process.env.SMTP_USER,
      to: "contact@nemwood.be",
      subject: `Nouvelle demande de contact - ${firstName} ${lastName}`,
      text: emailContent,
      html: emailContent.replace(/\n/g, "<br>"),
      replyTo: email, // Allow direct reply to the customer
    });
    console.log("Email sent successfully to contact@nemwood.be");

    // Optional: Send confirmation email to the customer
    const confirmationContent = `
Bonjour ${firstName},

Merci pour votre message ! Nous avons bien re√ßu votre demande concernant votre projet de menuiserie.

Notre √©quipe vous recontactera dans les plus brefs d√©lais (g√©n√©ralement sous 24h) pour discuter de vos besoins et vous proposer une solution sur mesure.

Votre message :
"${message}"

Cordialement,
L'√©quipe Nemwood
Menuisier artisan en Belgique

---
Cet email est envoy√© automatiquement, merci de ne pas y r√©pondre.
Pour toute question urgente, contactez-nous directement au 0489 33 05 44.
    `.trim();

    await transporter.sendMail({
      from: process.env.SMTP_FROM || process.env.SMTP_USER,
      to: email,
      subject: "Confirmation de r√©ception - Nemwood",
      text: confirmationContent,
      html: confirmationContent.replace(/\n/g, "<br>"),
    });

    return {
      success: true,
    };
  } catch (error) {
    console.error("‚ùå Contact form submission error:", error);
    console.error("‚ùå Error details:", {
      name: error instanceof Error ? error.name : "Unknown",
      message: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    });
    return {
      error:
        "Une erreur est survenue lors de l'envoi de votre message. Veuillez r√©essayer ou nous contacter directement.",
    };
  }
}
